[tool.poetry]
name = "torchext"
version = "0.0.0"
description = "Bootstrap for Torch CUDA extensions."
readme = "README.md"
authors = ["Benjamin RIVIERE <briviere01@gmail.com>"]
repository = "https://github.com/bendabir/torchext"
build = "build.py"

[[tool.poetry.source]]
name = "torch-cuda-11.7"
url = "https://download.pytorch.org/whl/cu117"
priority = "explicit" # Only looked up for packages using this source

[tool.poetry.dependencies]
python =">=3.8, <3.12"
torch = { version = ">=1.13.0, <2.1.0", source = "torch-cuda-11.7"}

[tool.poetry.group.build.dependencies]
setuptools = ">=64.0.0"
ninja = "~=1.11.1"
numpy = "~=1.24.0"
torch = { version = "~=2.0.0", source = "torch-cuda-11.7"}

[tool.poetry.group.dev.dependencies]
ipython = ">=8.0,<8.13"

[build-system]
requires = [
    "--extra-index-url",
    "https://download.pytorch.org/whl/cu117",
    "poetry-core>=1.0.0",
    "setuptools>=64.0.0",
    "ninja~=1.11.1",
    "numpy~=1.24.0",
    "torch~=2.0.0"
]
build-backend = "poetry.masonry.api"

[tool.black]
line-length = 88
target-version = ["py311"]

[tool.ruff]
line-length = 88
target-version = "py311"
required-version = "0.0.272"
task-tags = [
    "TODO",
    "FIXME",
    "NOTE"
]
select = [
    # More details : https://beta.ruff.rs/docs/rules/
    "F",     # pyflakes
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "I",     # isort
    "C90",   # mccabe
    "N",     # pep8-naming
    "D",     # pydocstyle
    "UP",    # pyupgrade
    "YTT",   # flake8-2020
    "ANN",   # flake8-annotations
    "ASYNC", # flake8-async
    "S",     # flake8-bandit
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "T10",   # flake8-debugger
    "FA",    # flake8-future-annotations
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "G",     # flake8-logging-format
    "INP",   # flake8-no-pep40
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "TCH",   # flake8-type-checking
    "ARG",   # flake8-unused-arguments
    "TD",    # flake8-todos
    "FIX",   # flake8-fixme
    "ERA",   # eradicate
    "PGH",   # pygrep-hooks
    "PLC",   # pylint convention
    "PLE",   # pylint errors
    "PLR",   # pylint refactor
    "PLW",   # pylint warnings
    "TRY",   # tryceratops
    "FLY",   # flynt
    "NPY",   # numpy rules
    "RUF",   # ruff specific
]
ignore = [
    "B905",    # zip() without an explicit strict= parameter
    "N812",    # Lowercase imported as non-lowercase (for torch.nn.functionnal)
    "PLR2004", # Magic value used in comparison
    "TRY003",  # Avoid specifying long messages outside the exception class (don't really agree with this one)
    "TRY400",  # Use logging.exception instead of logging.error (don't really agree with this one)
    "ANN101",  # Missing type annotation for self in method
    "ANN102",  # Missing type annotation for cls in classmethod
    "TD001",   # Invalid TODO tag
    "TD002",   # Missing author in TODO
    "TD003",   # Missing issue link on the line following the TODO
    "D100",    # Missing docstring in public module
    "D104",    # Missing docstring in public package
    "D105",    # Missing docstring in magic method
    "D418",    # Function decorated with '@overload' shouldn't contain a docstring
]
exclude = [
    "**/tests/**/test_*.py", # Mostly for VSCode
]

[tool.ruff.per-file-ignores]
"__init__.py" = [
    "F401", # Unused import
    "F403", # Unable to detect undefined names
]

[tool.ruff.isort]
combine-as-imports = true
required-imports = [
    "from __future__ import annotations"
]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.flake8-annotations]
mypy-init-return = true
suppress-none-returning = true
suppress-dummy-args = true

[tool.ruff.flake8-unused-arguments]
ignore-variadic-names = true
